#CPPFLAGS Extra flags to give to the C preprocessor and programs that use it (the C and Fortran compilers).
#CFLAGS   Extra flags to give to the C compiler.
#CXXFLAGS Extra flags to give to the C++ compiler.
#LDFLAGS  Extra flags to give to compilers when they are supposed to invoke the linker, 'ld'.

#Standard variables:
CC  = gcc
CXX = g++
CFLAGS   = -Wall -O2 $(EXTRACFLAGS)
CXXFLAGS = $(CFLAGS)
LDFLAGS  = -lm

#=====================================#
#  No need to change below this line  #
#=====================================#

COUT_PROGS = cout_endl_sync cout_noendl_sync cout_endl_nosync cout_noendl_nosync
PROGS = $(COUT_PROGS) printf $(EXTRAPROGS)

#Basic rules
.PHONY: all clean bench
all: $(PROGS)

clean:
	for a in $(PROGS); do \
		rm -f $$a ; \
	done

bench: $(PROGS)
	for a in $(PROGS); do \
		echo Running "$$a"...  ;\
		time ./$$a > /dev/null ; \
	done

#Some implicit rules
# (make already has a built-in default compile command)
printf: printf.c
putchar: putchar.c
puts: puts.c

# Special cout rules
cout_endl_sync: cout.cpp
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -DENDL   -DSYNC   $(LDFLAGS) -o $@ $^
cout_noendl_sync: cout.cpp
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -DNOENDL -DSYNC   $(LDFLAGS) -o $@ $^
cout_endl_nosync: cout.cpp
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -DENDL   -DNOSYNC $(LDFLAGS) -o $@ $^
cout_noendl_nosync: cout.cpp
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -DNOENDL -DNOSYNC $(LDFLAGS) -o $@ $^
